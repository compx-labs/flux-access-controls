{
    "name": "flux-gate",
    "structs": {
        "FluxRecord": [
            {
                "name": "tier",
                "type": "uint64"
            }
        ],
        "FluxRecordKey": [
            {
                "name": "userAddress",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "account",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initApplication",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addFluxTier",
            "args": [
                {
                    "type": "uint64",
                    "name": "tierNumber"
                },
                {
                    "type": "uint64",
                    "name": "minRequired"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeFluxTier",
            "args": [
                {
                    "type": "uint64",
                    "name": "tierNumber"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setUserTier",
            "args": [
                {
                    "type": "address",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "tier"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserTier",
            "args": [
                {
                    "type": "address",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin_account": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW5fYWNjb3VudA=="
                },
                "current_num_tiers": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF9udW1fdGllcnM="
                }
            },
            "local": {},
            "box": {
                "flux_tiers": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[10]",
                    "key": "ZnQ="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "flux_records": {
                    "keyType": "FluxRecordKey",
                    "valueType": "FluxRecord",
                    "prefix": "Zmx1eF9yZWNvcmQ="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        308,
                        347,
                        425
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        313,
                        352,
                        426
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        124,
                        148,
                        167,
                        183,
                        202,
                        224
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        274
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        228
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        127,
                        151,
                        170,
                        186,
                        205
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        297,
                        327,
                        342,
                        382,
                        397
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        215
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQAKECYFAmZ0EWN1cnJlbnRfbnVtX3RpZXJzDWFkbWluX2FjY291bnQLZmx1eF9yZWNvcmQIAAAAAAAAAAAxG0EAMYIGBNpT/v4E+Sep9gRbR7GOBGyKAxgEoH0AzwTU16pcNhoAjgYAZgBQAD0ALQAaAAIjQzEZFEQxGEQ2GgGIARSABBUffHVMULAiQzEZFEQxGEQ2GgE2GgIXiADjIkMxGRREMRhENhoBF4gAnCJDMRkURDEYRDYaARc2GgKIAFwiQzEZFEQxGEQxFiIJSTgQIhJEiAAdIkMxGRREMRgURDYaARfAHIgAAiJDigEAKov/Z4mKAQCL/zgHMgoSQQAYi/84CIGAtRgSQQAMIkQogaABuUgpI2eJI0L/8YoCADEAIyplRBJEi/4Wi/9QKL5Ei/4kDESL/iULTwJdKEy/IyllRCIIKUxniYoBADEAIyplRBJEKL5Ei/8kDESL/yULgBAAAAAAAAAAAAAAAAAAAAAAXShMvyMpZUQiCSlMZ4mKAgAxACMqZUQSRIv/FiuL/lBMv4mKAQEri/9QSb1FAUEABr5EVwAIiScEvycEiQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}