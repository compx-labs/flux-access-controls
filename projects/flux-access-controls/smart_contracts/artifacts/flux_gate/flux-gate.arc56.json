{
    "name": "flux-gate",
    "structs": {
        "FluxRecord": [
            {
                "name": "tier",
                "type": "uint64"
            }
        ],
        "FluxRecordKey": [
            {
                "name": "userAddress",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "account",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initApplication",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addFluxTier",
            "args": [
                {
                    "type": "uint64",
                    "name": "tierNumber"
                },
                {
                    "type": "uint64",
                    "name": "minRequired"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeFluxTier",
            "args": [
                {
                    "type": "uint64",
                    "name": "tierNumber"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setUserTier",
            "args": [
                {
                    "type": "address",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "tier"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserTier",
            "args": [
                {
                    "type": "address",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin_account": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW5fYWNjb3VudA=="
                },
                "current_num_tiers": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF9udW1fdGllcnM="
                }
            },
            "local": {},
            "box": {
                "flux_tiers": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[10]",
                    "key": "ZnQ="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "flux_records": {
                    "keyType": "FluxRecordKey",
                    "valueType": "FluxRecord",
                    "prefix": "Zmx1eF9yZWNvcmQ="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        299,
                        338,
                        410
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        304,
                        343,
                        411
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        115,
                        139,
                        158,
                        174,
                        193,
                        215
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        265
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        219
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        118,
                        142,
                        161,
                        177,
                        196
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        288,
                        318,
                        333,
                        373
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        206
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQAKECYEAmZ0EWN1cnJlbnRfbnVtX3RpZXJzDWFkbWluX2FjY291bnQLZmx1eF9yZWNvcmQxG0EAMYIGBNpT/v4E+Sep9gRbR7GOBGyKAxgEoH0AzwTU16pcNhoAjgYAZgBQAD0ALQAaAAIjQzEZFEQxGEQ2GgGIAQyABBUffHVMULAiQzEZFEQxGEQ2GgE2GgIXiADjIkMxGRREMRhENhoBF4gAnCJDMRkURDEYRDYaARc2GgKIAFwiQzEZFEQxGEQxFiIJSTgQIhJEiAAdIkMxGRREMRgURDYaARfAHIgAAiJDigEAKov/Z4mKAQCL/zgHMgoSQQAYi/84CIGAtRgSQQAMIkQogaABuUgpI2eJI0L/8YoCADEAIyplRBJEi/4Wi/9QKL5Ei/4kDESL/iULTwJdKEy/IyllRCIIKUxniYoBADEAIyplRBJEKL5Ei/8kDESL/yULgBAAAAAAAAAAAAAAAAAAAAAAXShMvyMpZUQiCSlMZ4mKAgCL/xYri/5QTL+JigEBK4v/UEm9RQFAAAmLAL5EVwAITImACAAAAAAAAAAATIk=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}