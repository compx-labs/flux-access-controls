{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/flux-access-controls/projects/flux-access-controls/smart_contracts/flux_gate/flux-gate.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAqDG;;AAAA;AAAA;AAAA;;AAAA;AArDH;;;AAqDG;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA3CH;;;AAAA;;;AAAA;AA2CG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAlCH;;;AAAA;AAkCG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAzBH;;;AAAA;AAAA;;;AAyBG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAlBH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAbH;;;AAAA;AAAA;;AAaG;;;AAAA;;AAAD;;;AAVA;AAYE;;AAAA;;AAGF;;;AAEE;;AAAA;;AAAuC;;AAAvC;AAAA;;;AAAA;;AAAA;;AAA0E;;;;AAA1E;AAAA;;;;AAAA;AAbiD;AAcjD;;AAAA;;AAZF;AAaiC;AAA/B;;;;;;AAGF;;;AAGgB;;AAzBhB;AAAA;AAAA;AAAA;AAyBS;AAAP;AAE2C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAA3B;;AAAA;AAvBiC;AAwBjC;AAAA;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAxBiD;AAwBjD;AAAA;AAtBF;AAAA;AAAA;AAAA;AAuBkC;AAAhC;AAvBF;AAuBE;AAAA;;AAEF;;;AAGgB;;AAlChB;AAAA;AAAA;AAAA;AAkCS;AAAP;AA9BiD;AAgCjC;AAAA;AAAhB;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAoC;;;;;;;;;;;AAApC;AAhCiD;AAgCjD;AAAA;AA9BF;AAAA;AAAA;AAAA;AA+BkC;AAAhC;AA/BF;AA+BE;AAAA;;AAGF;;;AAMwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AA5CsB;AAAA;;AAAA;AA6C5D;AAAA;;AAGF;;;AAhD8D;AAAA;;AAAA;AAmDhB;AAAA;AAC9B;;;AAAd",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 10"
    },
    "7": {
      "op": "bytecblock \"ft\" \"current_num_tiers\" \"admin_account\" \"flux_record\""
    },
    "56": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "58": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "61": {
      "op": "pushbytess 0xda53fefe 0xf927a9f6 0x5b47b18e 0x6c8a0318 0xa07d00cf 0x1d96b637 // method \"createApplication(account)void\", method \"initApplication(pay)void\", method \"addFluxTier(uint64,uint64)void\", method \"removeFluxTier(uint64)void\", method \"setUserTier(address,uint64)void\", method \"getUserTier(address)uint8\"",
      "defined_out": [
        "Method(addFluxTier(uint64,uint64)void)",
        "Method(createApplication(account)void)",
        "Method(getUserTier(address)uint8)",
        "Method(initApplication(pay)void)",
        "Method(removeFluxTier(uint64)void)",
        "Method(setUserTier(address,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account)void)",
        "Method(initApplication(pay)void)",
        "Method(addFluxTier(uint64,uint64)void)",
        "Method(removeFluxTier(uint64)void)",
        "Method(setUserTier(address,uint64)void)",
        "Method(getUserTier(address)uint8)"
      ]
    },
    "93": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addFluxTier(uint64,uint64)void)",
        "Method(createApplication(account)void)",
        "Method(getUserTier(address)uint8)",
        "Method(initApplication(pay)void)",
        "Method(removeFluxTier(uint64)void)",
        "Method(setUserTier(address,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account)void)",
        "Method(initApplication(pay)void)",
        "Method(addFluxTier(uint64,uint64)void)",
        "Method(removeFluxTier(uint64)void)",
        "Method(setUserTier(address,uint64)void)",
        "Method(getUserTier(address)uint8)",
        "tmp%2#0"
      ]
    },
    "96": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_addFluxTier_route@5 main_removeFluxTier_route@6 main_setUserTier_route@7 main_getUserTier_route@8",
      "stack_out": []
    },
    "110": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "block": "main_getUserTier_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "115": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "116": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "119": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "122": {
      "callsub": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.getUserTier",
      "op": "callsub getUserTier",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "125": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0x151f7c75"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%33#0"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "133": {
      "op": "log",
      "stack_out": []
    },
    "134": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_setUserTier_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "143": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "146": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "149": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%28#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.setUserTier",
      "op": "callsub setUserTier",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "op": "return",
      "stack_out": []
    },
    "155": {
      "block": "main_removeFluxTier_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "157": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "162": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "165": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.removeFluxTier",
      "op": "callsub removeFluxTier",
      "stack_out": []
    },
    "169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "block": "main_addFluxTier_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "173": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "174": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "178": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "181": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "182": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "185": {
      "callsub": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.addFluxTier",
      "op": "callsub addFluxTier",
      "stack_out": []
    },
    "188": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "192": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "193": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "196": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "197": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "199": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "1"
      ]
    },
    "200": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "201": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "202": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "204": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "205": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "206": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "207": {
      "callsub": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "210": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "return",
      "stack_out": []
    },
    "212": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "215": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "216": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "219": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "220": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "223": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "224": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "226": {
      "callsub": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "229": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "subroutine": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.createApplication",
      "params": {
        "admin#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "234": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "235": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "238": {
      "retsub": true,
      "op": "retsub"
    },
    "239": {
      "subroutine": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.initApplication",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "242": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "244": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "248": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "249": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "252": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "254": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "256": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400000"
      ]
    },
    "260": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "261": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "264": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "265": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "266": {
      "op": "bytec_0 // \"ft\"",
      "defined_out": [
        "\"ft\""
      ],
      "stack_out": [
        "\"ft\""
      ]
    },
    "267": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "\"ft\"",
        "90"
      ],
      "stack_out": [
        "\"ft\"",
        "90"
      ]
    },
    "269": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "270": {
      "op": "pop",
      "stack_out": []
    },
    "271": {
      "op": "bytec_1 // \"current_num_tiers\"",
      "defined_out": [
        "\"current_num_tiers\""
      ],
      "stack_out": [
        "\"current_num_tiers\""
      ]
    },
    "272": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"current_num_tiers\"",
        "0"
      ],
      "stack_out": [
        "\"current_num_tiers\"",
        "0"
      ]
    },
    "273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "274": {
      "retsub": true,
      "op": "retsub"
    },
    "275": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "276": {
      "op": "b initApplication_bool_merge@4"
    },
    "279": {
      "subroutine": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.addFluxTier",
      "params": {
        "tierNumber#0": "uint64",
        "minRequired#0": "bytes"
      },
      "block": "addFluxTier",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "282": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "284": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "285": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "286": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "287": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "288": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "289": {
      "op": "assert",
      "stack_out": []
    },
    "290": {
      "op": "frame_dig -2",
      "defined_out": [
        "tierNumber#0 (copy)"
      ],
      "stack_out": [
        "tierNumber#0 (copy)"
      ]
    },
    "292": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "294": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "295": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "296": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "297": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "298": {
      "op": "extract 7 1",
      "defined_out": [
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0"
      ]
    },
    "301": {
      "op": "frame_dig -1",
      "defined_out": [
        "minRequired#0 (copy)",
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0",
        "minRequired#0 (copy)"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "newTier#0"
      ],
      "stack_out": [
        "newTier#0"
      ]
    },
    "304": {
      "op": "bytec_0 // \"ft\"",
      "defined_out": [
        "\"ft\"",
        "newTier#0"
      ],
      "stack_out": [
        "newTier#0",
        "\"ft\""
      ]
    },
    "305": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "newTier#0"
      ],
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "306": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0"
      ]
    },
    "307": {
      "op": "frame_dig -2",
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ]
    },
    "309": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "maybe_value%1#0",
        "newTier#0",
        "tierNumber#0 (copy)"
      ],
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "tierNumber#0 (copy)",
        "10"
      ]
    },
    "310": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "maybe_value%1#0",
        "newTier#0"
      ],
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "311": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0"
      ]
    },
    "312": {
      "op": "frame_dig -2",
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ]
    },
    "314": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "maybe_value%1#0",
        "newTier#0",
        "tierNumber#0 (copy)"
      ],
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "tierNumber#0 (copy)",
        "9"
      ]
    },
    "316": {
      "op": "*",
      "defined_out": [
        "maybe_value%1#0",
        "newTier#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "newTier#0",
        "maybe_value%1#0",
        "write_offset%0#0"
      ]
    },
    "317": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%1#0",
        "write_offset%0#0",
        "newTier#0"
      ]
    },
    "319": {
      "op": "replace3",
      "defined_out": [
        "updated_target%0#0"
      ],
      "stack_out": [
        "updated_target%0#0"
      ]
    },
    "320": {
      "op": "bytec_0 // \"ft\"",
      "stack_out": [
        "updated_target%0#0",
        "\"ft\""
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "\"ft\"",
        "updated_target%0#0"
      ]
    },
    "322": {
      "op": "box_put",
      "stack_out": []
    },
    "323": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "324": {
      "op": "bytec_1 // \"current_num_tiers\"",
      "defined_out": [
        "\"current_num_tiers\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"current_num_tiers\""
      ]
    },
    "325": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "326": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "327": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "328": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "329": {
      "op": "bytec_1 // \"current_num_tiers\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"current_num_tiers\""
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "\"current_num_tiers\"",
        "new_state_value%0#0"
      ]
    },
    "331": {
      "op": "app_global_put",
      "stack_out": []
    },
    "332": {
      "retsub": true,
      "op": "retsub"
    },
    "333": {
      "subroutine": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.removeFluxTier",
      "params": {
        "tierNumber#0": "uint64"
      },
      "block": "removeFluxTier",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "336": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "338": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "339": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "340": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "341": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "342": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "343": {
      "op": "assert",
      "stack_out": []
    },
    "344": {
      "op": "bytec_0 // \"ft\"",
      "defined_out": [
        "\"ft\""
      ],
      "stack_out": [
        "\"ft\""
      ]
    },
    "345": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "346": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "347": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ]
    },
    "349": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tierNumber#0 (copy)",
        "10"
      ]
    },
    "350": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "351": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "352": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ]
    },
    "354": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "maybe_value%1#0",
        "tierNumber#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tierNumber#0 (copy)",
        "9"
      ]
    },
    "356": {
      "op": "*",
      "defined_out": [
        "maybe_value%1#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "write_offset%0#0"
      ]
    },
    "357": {
      "op": "pushbytes 0x000000000000000000",
      "defined_out": [
        "0x000000000000000000",
        "maybe_value%1#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "write_offset%0#0",
        "0x000000000000000000"
      ]
    },
    "368": {
      "op": "replace3",
      "defined_out": [
        "updated_target%0#0"
      ],
      "stack_out": [
        "updated_target%0#0"
      ]
    },
    "369": {
      "op": "bytec_0 // \"ft\"",
      "stack_out": [
        "updated_target%0#0",
        "\"ft\""
      ]
    },
    "370": {
      "op": "swap",
      "stack_out": [
        "\"ft\"",
        "updated_target%0#0"
      ]
    },
    "371": {
      "op": "box_put",
      "stack_out": []
    },
    "372": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "373": {
      "op": "bytec_1 // \"current_num_tiers\"",
      "defined_out": [
        "\"current_num_tiers\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"current_num_tiers\""
      ]
    },
    "374": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "375": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "376": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "377": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "378": {
      "op": "bytec_1 // \"current_num_tiers\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"current_num_tiers\""
      ]
    },
    "379": {
      "op": "swap",
      "stack_out": [
        "\"current_num_tiers\"",
        "new_state_value%0#0"
      ]
    },
    "380": {
      "op": "app_global_put",
      "stack_out": []
    },
    "381": {
      "retsub": true,
      "op": "retsub"
    },
    "382": {
      "subroutine": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.setUserTier",
      "params": {
        "user#0": "bytes",
        "tier#0": "uint64"
      },
      "block": "setUserTier",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "385": {
      "op": "frame_dig -1",
      "defined_out": [
        "tier#0 (copy)"
      ],
      "stack_out": [
        "tier#0 (copy)"
      ]
    },
    "387": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "389": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "390": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "391": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "392": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "393": {
      "op": "extract 7 1",
      "defined_out": [
        "record#0"
      ],
      "stack_out": [
        "record#0"
      ]
    },
    "396": {
      "op": "bytec_3 // \"flux_record\"",
      "defined_out": [
        "\"flux_record\"",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "\"flux_record\""
      ]
    },
    "397": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"flux_record\"",
        "record#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "\"flux_record\"",
        "user#0 (copy)"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "record#0",
        "tmp%0#0"
      ]
    },
    "400": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0"
      ]
    },
    "401": {
      "op": "box_put",
      "stack_out": []
    },
    "402": {
      "retsub": true,
      "op": "retsub"
    },
    "403": {
      "subroutine": "smart_contracts/flux_gate/flux-gate.algo.ts::FluxGate.getUserTier",
      "params": {
        "user#0": "bytes"
      },
      "block": "getUserTier",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "406": {
      "op": "bytec_3 // \"flux_record\"",
      "defined_out": [
        "\"flux_record\""
      ],
      "stack_out": [
        "\"flux_record\""
      ]
    },
    "407": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"flux_record\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "\"flux_record\"",
        "user#0 (copy)"
      ]
    },
    "409": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "410": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%0#0"
      ]
    },
    "411": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "412": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "415": {
      "retsub": true,
      "op": "retsub"
    }
  }
}